# Generated by Django 4.1.7 on 2023-03-13 05:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update at')),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', sorl.thumbnail.fields.ImageField(upload_to='photos/avatars/%Y/%m/%d/', verbose_name='Avatar')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Birthdate')),
                ('gender', models.CharField(blank=True, choices=[('man', 'man'), ('female', 'female')], max_length=10, null=True, verbose_name='Gender')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='Country')),
                ('region', models.CharField(blank=True, max_length=50, null=True, verbose_name='Region')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Address')),
                ('postal_index', models.CharField(blank=True, max_length=20, null=True, verbose_name='Postal Index')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(error_messages={'unique': 'A user with that phone number already exists.'}, max_length=128, region=None, unique=True, verbose_name='Phone Number')),
                ('is_email_confirmed', models.BooleanField(default=False)),
                ('instagram_account', models.CharField(blank=True, max_length=30, null=True, verbose_name='Instagram')),
                ('imkon_account', models.CharField(blank=True, max_length=30, null=True, verbose_name='Imkon')),
                ('linkedin_account', models.CharField(blank=True, max_length=30, null=True, verbose_name='Linkedin')),
                ('work_place', models.CharField(blank=True, max_length=100, null=True, verbose_name='Work Place')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biography')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.position')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
